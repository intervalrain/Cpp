#include <iostream>
#include <algorithm>
using namespace std;

/**
 * Search in a Rotated Array (Easy)
 *
 * Given a sorted and rotated array arr of n distinct elements which is rotated at some point,
 * and given an element key.
 * The task is to find the index of the given element key in the array arr.
 */

class Solution{
public:
    int search(int arr[], int l, int h, int key){
        if (l > h) return -1;
        int m = l + (h-l)/2;
        if (arr[m] == key) return m;
        if (arr[l] == key) return l;
        if (arr[l] < arr[m]){
            if (key > arr[l] && key < arr[m])
                return bs(arr, l+1, m-1, key);
            return search(arr, m+1, h, key);
        }
        if (key < arr[l] && key > arr[m])
            return bs(arr, m+1, h, key);
        return search(arr, l+1, m-1, key);
    }
    int bs(int arr[], int l, int h, int key){
        int res = -1;
        while (l < h){
            int m = l + (h-l)/2;
            if (arr[m] == key){
                res = m;
                break;
            } else if (key < arr[m]){
                h = m - 1;
            } else {
                l = m + 1;
            }
        }
        return res;
    }
};

int main(){
    Solution* sol = new Solution;
    int arr1[] = {5,6,7,8,9,10,1,2,3};
    int key = 10;
    cout << sol->search(arr1, 0, 8, key) << endl;  // 5

    int arr2[] = {3,5,1,2};
    key = 6;
    cout << sol->search(arr2, 0, 3, key) << endl;  // -1

    int arr3[] = {371,376,378,381,383,389,391,393,395,397,400,401,404,407,413,418,419,423,429,430,431,432,433,437,440,441,442,443,446,447,449,451,452,458,459,466,467,468,473,474,477,478,480,484,485,489,493,495,496,501,502,504,505,507,508,509,511,513,514,521,524,527,528,529,530,531,534,535,539,541,543,545,546,550,552,553,554,555,558,559,561,562,565,572,573,574,576,581,583,585,586,587,588,590,592,601,607,608,609,610,611,612,614,615,617,618,620,623,624,625,627,629,631,632,634,637,639,644,651,653,655,656,657,659,661,662,670,680,681,683,686,688,691,693,694,697,698,703,705,706,707,708,712,716,717,718,719,727,729,736,738,742,743,745,747,749,755,758,760,763,764,765,766,767,769,771,772,773,775,778,780,781,783,785,787,791,795,797,798,801,803,806,810,814,815,816,818,819,822,825,826,828,829,830,832,836,837,840,845,848,851,853,859,862,866,867,868,869,872,874,875,879,880,882,883,888,890,893,894,898,899,900,903,905,909,912,913,914,918,922,928,930,935,937,940,944,945,946,947,954,957,959,960,961,963,968,970,971,973,975,976,977,979,982,984,987,989,991,992,993,995,997,3,5,6,9,11,18,20,21,22,27,28,31,33,35,38,39,41,47,49,51,53,54,55,56,58,59,62,67,70,71,73,75,84,89,92,95,97,99,102,108,110,112,117,118,119,121,124,125,126,129,130,131,132,139,140,141,142,143,148,149,150,151,152,153,155,156,158,159,160,161,164,167,168,172,173,174,177,184,187,188,192,194,197,198,200,204,205,206,213,216,220,224,226,229,230,235,239,241,248,250,251,252,253,255,256,257,258,260,261,264,268,272,276,278,280,284,288,290,291,293,296,297,299,301,303,305,307,309,312,317,318,323,324,325,326,327,328,330,336,337,338,340,342,343,347,348,351,353,355,356,359,361,362,364,366,369};
    key = 970;
    cout << sol->search(arr3, 0, 417, key) << endl; // 246
}
